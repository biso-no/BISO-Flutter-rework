default_platform(:ios)

platform :ios do
  desc "Build and upload to TestFlight"
  lane :beta do
    # Ensure tools present
    setup_ci

    # Optionally install pods (Flutter will also trigger as needed)
    cocoapods(clean_install: true)

    # Build numbers and version
    build_number = ENV["BUILD_NUMBER"] || Time.now.strftime("%Y%m%d%H%M")
    app_version = ENV["APP_VERSION"] || "1.0.0"

    # Create ExportOptions.plist for flutter build ipa
    export_plist_path = File.join(Dir.mktmpdir, "ExportOptions.plist")
    provisioning_profile_name = ENV["PROVISIONING_PROFILE_NAME"] || ENV["PROVISIONING_PROFILE_SPECIFIER"]
    File.write(export_plist_path, <<~PLIST)
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
      <plist version="1.0">
      <dict>
        <key>method</key>
        <string>app-store</string>
        <key>signingStyle</key>
        <string>manual</string>
        <key>provisioningProfiles</key>
        <dict>
          <key>com.biso.no</key>
          <string>#{provisioning_profile_name}</string>
        </dict>
        <key>destination</key>
        <string>export</string>
        <key>uploadBitcode</key>
        <false/>
        <key>uploadSymbols</key>
        <true/>
        <key>compileBitcode</key>
        <false/>
        <key>stripSwiftSymbols</key>
        <true/>
      </dict>
      </plist>
    PLIST

    # Build IPA using Flutter (respects Release.xcconfig codesign settings injected by CI)
    sh "cd .. && flutter build ipa --release --build-name=#{app_version} --build-number=#{build_number} --export-options-plist=#{export_plist_path}"

    # Upload to TestFlight using App Store Connect API key if provided
    if ENV["APPLE_API_KEY_ID"] && ENV["APPLE_API_ISSUER_ID"] && ENV["APPLE_API_PRIVATE_KEY"]
      api_key = app_store_connect_api_key(
        key_id: ENV["APPLE_API_KEY_ID"],
        issuer_id: ENV["APPLE_API_ISSUER_ID"],
        key_content: ENV["APPLE_API_PRIVATE_KEY"],
        is_key_content_base64: false
      )
      # Find produced IPA
      ipa_path = Dir[File.expand_path("../build/ios/ipa/*.ipa", __dir__)].first
      pilot(api_key: api_key, skip_waiting_for_build_processing: true, ipa: ipa_path)
    else
      # Fallback to Apple ID auth
      ipa_path = Dir[File.expand_path("../build/ios/ipa/*.ipa", __dir__)].first
      pilot(skip_waiting_for_build_processing: true, ipa: ipa_path)
    end
  end
end


