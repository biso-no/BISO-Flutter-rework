name: iOS Deployment

on:
  push:
    branches:
      - main  # Deploy to TestFlight on main branch
      - release/*  # Deploy to App Store on release branches
  workflow_dispatch:
    inputs:
      lane:
        description: 'Fastlane lane to run'
        required: true
        default: 'beta'
        type: choice
        options:
          - beta
          - release

jobs:
  deploy:
    name: Build and Deploy iOS App
    runs-on: macos-latest
    env:
      # Map secrets to env for easier reference and valid context usage in conditions
      MATCH_SSH_KEY: ${{ secrets.MATCH_SSH_KEY }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
      APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
      APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
      APPLE_API_PRIVATE_KEY: ${{ secrets.APPLE_API_PRIVATE_KEY }}
      APP_STORE_CONNECT_TEAM_ID: ${{ secrets.APP_STORE_CONNECT_TEAM_ID }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for version tags

      - name: Select Xcode 15.4
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8'
          channel: 'stable'
          cache: true

      - name: Show selected Xcode and SDKs
        run: |
          xcodebuild -version
          xcode-select -p
          echo "Available iOS SDKs:"
          xcodebuild -showsdks | grep iphoneos

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: ios

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .flutter-plugins
            .flutter-plugin-dependencies
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Install iOS dependencies
        working-directory: ios
        run: |
          pod repo update
          pod install

      # SSH setup removed - using HTTPS with PAT for better reliability

      - name: Determine deployment lane
        id: deployment
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "lane=${{ github.event.inputs.lane }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/main ]]; then
            echo "lane=beta" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
            echo "lane=release" >> $GITHUB_OUTPUT
          else
            echo "lane=beta" >> $GITHUB_OUTPUT
          fi

      - name: Validate secrets and repository access
        id: validate
        run: |
          echo "Checking required secrets..."
          if [ -z "${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}" ]; then
            echo "‚ùå MATCH_GIT_BASIC_AUTHORIZATION is not set"
            exit 1
          fi
          if [ -z "${{ secrets.MATCH_PASSWORD }}" ]; then
            echo "‚ùå MATCH_PASSWORD is not set"  
            exit 1
          fi
          if [ -z "${{ secrets.APPLE_API_KEY_ID }}" ]; then
            echo "‚ùå APPLE_API_KEY_ID is not set"
            exit 1
          fi
          echo "‚úÖ All required secrets are present"
          
          # Test repository access with proper authentication
          echo "Testing repository access..."
          
          # Check if token looks like a GitHub PAT (starts with ghp_ or github_pat_)
          if [[ "${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}" =~ ^(ghp_|github_pat_) ]]; then
            echo "‚ÑπÔ∏è Detected raw GitHub token, converting to base64 format..."
            # For GitHub tokens, username can be anything, but we'll use 'token'
            ENCODED_AUTH=$(echo -n "token:${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}" | base64)
            echo "Using converted authentication format"
          else
            echo "‚ÑπÔ∏è Using provided base64 authentication"
            ENCODED_AUTH="${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}"
          fi
          
          # Test access with authentication (handle empty repositories gracefully)
          echo "Testing repository access with authentication..."
          if curl -s -f -H "Authorization: token ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}" \
             "https://api.github.com/repos/biso-no/ios-certificates" > /dev/null; then
            echo "‚úÖ Repository access verified"
            
            # Check if repository has any commits/content
            echo "Checking repository content..."
            COMMITS_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}" \
              "https://api.github.com/repos/biso-no/ios-certificates/commits")
            echo "Commits API response: $COMMITS_RESPONSE"
            
            # Check if the response contains an empty array or error message
            if echo "$COMMITS_RESPONSE" | grep -q "Git Repository is empty" || \
               echo "$COMMITS_RESPONSE" | grep -q '\[\]' || \
               echo "$COMMITS_RESPONSE" | grep -q "No commits found"; then
              echo "‚ÑπÔ∏è Repository appears to be empty - certificates will need to be generated"
              echo "repo_is_empty=true" >> $GITHUB_OUTPUT
            else
              echo "‚ÑπÔ∏è Repository has content - certificates should exist"
              echo "repo_is_empty=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ùå Cannot access ios-certificates repository. Check if:"
            echo "1. Repository exists: https://github.com/biso-no/ios-certificates"
            echo "2. GitHub token has access to this private repo"
            echo "3. Token has 'Contents' read/write permissions"
            echo "4. Repository is private and token has access to private repos"
            exit 1
          fi

      - name: Generate certificates if repository is empty
        if: steps.validate.outputs.repo_is_empty == 'true'
        working-directory: ios
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APPLE_API_PRIVATE_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
          APPLE_API_PRIVATE_KEY: ${{ secrets.APPLE_API_PRIVATE_KEY }}
        run: |
          echo "üîê Generating certificates for empty repository..."
          echo "This is a one-time setup to create initial certificates and provisioning profiles."
          echo "Repository was detected as empty: ${{ steps.validate.outputs.repo_is_empty }}"
          
          # Use the setup_match lane which is designed for this purpose
          bundle exec fastlane setup_match
          
          echo "‚úÖ Initial certificates generated and stored in repository"

      - name: Run Fastlane
        working-directory: ios
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APPLE_API_PRIVATE_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_SSH_KEY: ${{ secrets.MATCH_SSH_KEY }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          APPLE_TEAM_ID: ${{ secrets.APP_STORE_CONNECT_TEAM_ID }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          # Map to expected env vars in existing Fastfile
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
          APPLE_API_PRIVATE_KEY: ${{ secrets.APPLE_API_PRIVATE_KEY }}
          CI: true
          GITHUB_ACTIONS: true
        run: |
          echo "üöÄ Starting fastlane lane: ${{ steps.deployment.outputs.lane }}"
          bundle exec fastlane ${{ steps.deployment.outputs.lane }}

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-build-${{ github.run_number }}
          path: build/ios/ipa/*.ipa
          retention-days: 30

      - name: Clean up SSH
        if: always()
        run: |
          rm -f ~/.ssh/id_ed25519

      - name: Notify deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const lane = '${{ steps.deployment.outputs.lane }}';
            const runNumber = '${{ github.run_number }}';
            const message = status === 'success' 
              ? `‚úÖ iOS ${lane} deployment #${runNumber} succeeded!`
              : `‚ùå iOS ${lane} deployment #${runNumber} failed.`;
            
            console.log(message);
            
            // You can add Slack/Discord notifications here if needed
