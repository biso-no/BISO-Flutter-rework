name: iOS Deployment

on:
  push:
    branches:
      - main  # Deploy to TestFlight on main branch
      - release/*  # Deploy to App Store on release branches
  workflow_dispatch:
    inputs:
      lane:
        description: 'Fastlane lane to run'
        required: true
        default: 'beta'
        type: choice
        options:
          - beta
          - release

jobs:
  deploy:
    name: Build and Deploy iOS App
    runs-on: macos-latest
    env:
      # Map secrets to env for easier reference and valid context usage in conditions
      MATCH_SSH_KEY: ${{ secrets.MATCH_SSH_KEY }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
      APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
      APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
      APPLE_API_PRIVATE_KEY: ${{ secrets.APPLE_API_PRIVATE_KEY }}
      APP_STORE_CONNECT_TEAM_ID: ${{ secrets.APP_STORE_CONNECT_TEAM_ID }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for version tags

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'  # Update to match your local version
          channel: 'stable'
          cache: true

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: ios

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .flutter-plugins
            .flutter-plugin-dependencies
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Cache CocoaPods
        uses: actions/cache@v3
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Install iOS dependencies
        working-directory: ios
        run: |
          pod repo update
          pod install

      - name: Setup SSH for Match
        if: ${{ env.MATCH_SSH_KEY != '' }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.MATCH_SSH_KEY }}" | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Determine deployment lane
        id: deployment
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "lane=${{ github.event.inputs.lane }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/main ]]; then
            echo "lane=beta" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
            echo "lane=release" >> $GITHUB_OUTPUT
          else
            echo "lane=beta" >> $GITHUB_OUTPUT
          fi

      - name: Run Fastlane
        working-directory: ios
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APPLE_API_PRIVATE_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_SSH_KEY: ${{ secrets.MATCH_SSH_KEY }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          APPLE_TEAM_ID: ${{ secrets.APP_STORE_CONNECT_TEAM_ID }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          # Map to expected env vars in existing Fastfile
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
          APPLE_API_PRIVATE_KEY: ${{ secrets.APPLE_API_PRIVATE_KEY }}
        run: |
          bundle exec fastlane ${{ steps.deployment.outputs.lane }}

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ios-build-${{ github.run_number }}
          path: build/ios/ipa/*.ipa
          retention-days: 30

      - name: Clean up SSH
        if: always()
        run: |
          rm -f ~/.ssh/id_ed25519

      - name: Notify deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const lane = '${{ steps.deployment.outputs.lane }}';
            const runNumber = '${{ github.run_number }}';
            const message = status === 'success' 
              ? `✅ iOS ${lane} deployment #${runNumber} succeeded!`
              : `❌ iOS ${lane} deployment #${runNumber} failed.`;
            
            console.log(message);
            
            // You can add Slack/Discord notifications here if needed
